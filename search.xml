<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[对称加密算法优化之 ChaCha20-Poly1305 算法支持]]></title>
    <url>%2F2019%2F04%2F25%2FChaCha20-Poly1305%2F</url>
    <content type="text"><![CDATA[前言近几年，Google、Baidu、Facebook 等互联网巨头，不谋而合地开始大力推行 HTTPS，国内外的大型互联网公司很多也都已启用全站 HTTPS，这也是未来互联网发展的趋势；从 2017 年开始，Chrome 浏览器已把采用 HTTP 协议的网站标记为不安全网站，苹果 App Store 中的所有应用也都必须使用 HTTPS 加密连接。 又拍云积极推动 HTTPS 的普及，共建安全云生态，将互联网安全提升到一个新的高度。2017年初，又拍云相继推出了免费的 Let’s Encrypt 和 TrustAsia 证书 ，并且和国际顶级 CA （包括：Symantec、GeoTrust）机构合作，提供 SSL 证书的申购、管理、部署等功能，操作流程简单方便，一键申购，与又拍云 CDN 服务完美结合，可为用户提供一站式 HTTPS 安全加速解决方案。 今天，我们在此宣布，又拍云 CDN 已经支持 Google 推出的针对移动端优化的加密套件，也即 ChaCha20-Poly1305。又拍云平台上所有的 CDN 用户都可以享受到该算法带来的好处。接下来的章节将会围绕此算法来展开介绍。 对称加密算法 PK在 TLS 握手的过程中，对称加密就是通过非对称加密算法得到的对称加密密钥。通俗的讲，就是加密（encryption）与解密（decryption）过程中使用相同的密钥。2000年10月2日，美国国家标准与技术研究所（NIST–American National Institute of Standards and Technology）选择了 Rijndael 算法作为新的高级加密标准（AES–Advanced Encryption Standard），常用的对称加密算法如下： 算法名 优点 缺点 AES-128-CBC 实现简单，运行速度快 无 MAC 功能 AES-128-GCM 有 MAC 功能 实现复杂，速度较 CBC 慢 ChaCha20-Poly1305 运行速度快，适用于移动端 推出时间较短 RC4 实现简单，运行速度快 已经不安全 AES-GCM 是目前常用的分组加密算法，但是其有一个缺点就是计算量大，导致性能和电量开销比较大。为了解决这个问题，intel 推出了名为 AES NI（Advanced Encryption Standard new instructions）的 x86 指令拓展集，从硬件上提供对 AES 的支持，具体参见文档 所以对于支持 AES NI 指令的设备来说，使用 AES-GCM 无疑是最佳选择。针对移动端，对于不支持 AES NI 的设备来说，Google 在 2014年 推出了一种新的流式加密算法 ChaCha20-Poly1305，在 ARM 平台上，性能是 AES-GCM 的 3-4 倍。 ChaCha20-Poly1305 算法介绍Chacha20-Poly1305 是由 Google 专门针对移动端 CPU 优化而采用的一种新式流式加密算法，它的性能相比普通算法要提高 3 倍，在 CPU 为精简指令集的 ARM 平台上尤为显著（ARM v8前效果较明显）。其中 Chacha20 是指对称加密算法，Poly1305 是指身份认证算法。使用该算法，可减少加密解密所产生的数据量进而可以改善用户体验，减少等待时间，节省电池寿命等。由于其算法精简、安全性强、兼容性强等特点，目前 Google致力于全面将其在移动端推广。 更好的性能体现 从 Google 公司公布的数据来看，Chacha20-Poly1305 能够提升 30% 以上的加解密性能，可有效节省移动端耗电量。对比当前流行的加密套件 AES-GCM，在不支持 AES NI 指令的硬件设备上，该算法会引起性能问题，如大部分的智能手机、平板电脑以及可穿戴设备。总的来说，在部分移动设备上，ChaCha20-Poly1305 加密的速度是 AES 的 3 倍还多。也即在使用 ChaCha20-Poly1305 时，较旧的计算机或者移动端设备在加解密方面会花费更少的计算时间，减少加解密时间意味着更快的页面加载速度以及更少的设备电池消耗。针对移动端设备，我们很容易得出这样的结论和解决方案：在具有硬件 AES 支持的 PC 电脑上，使用 AES-GCM 算法无疑是不错的选择；又拍云 CDN 平台会根据客户端支持的加密套件情况来智能选择是否提供 AES-GCM 还是 ChaCha20-Poly1305。对于最新的英特尔处理器，我们会使用标准的 AES-GCM 算法；对于没有硬件 AES 支持的设备来说，我们会优先选择 ChaCha20-Poly1305。 更安全的组合方式 就安全性而言，ChaCha20-Poly1305 加密套件使用了两种算法，其中 Chacha20 是指对称加密算法，Poly1305 是指身份认证算法。从 RFC 文档里面可以得知，ChaCha20 提供了 256 位的加密强度，这对于 AES-GCM 算法的 128 位的加密强度来说，已经绰绰有余。也就是说，使用 ChaCha20 作为对称加密算法来保障 HTTPS 安全性已经足够了。 Poly1305 作为身份认证算法提供身份验证，可以防止攻击者在 TLS 握手过程中，将虚假信息插入到安全的数据流中，Poly1305 提供了大约 100 位的安全性，足以阻止这类攻击。在 TLS 握手过程中，身份验证相比加密并没有那么重要，因为即使攻击者可以向数据流中添加虚假消息，在密钥信息没有被破解的情况下，也不会读取到内部的数据信息。 总之，ChaCha20-Poly1305 作为一个加密组合，可同时对数据提供机密性，完整性和真实性保证，避开了现有发现的所有安全漏洞和攻击，是一组极佳的加密套件组合。 实现方式及效果为了达到「针对支持 AES-NI 的终端使用 AES-GCM 算法，否则使用 ChaCha20 算法」这样的效果，服务端需要支持等价加密算法组就可以满足此要求，服务端 ssl_ciphers 配置可以参考如下： 1ssl_ciphers [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305|ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]:ECDHE+AES128:RSA+AES128:ECDHE+AES256:RSA+AES256:ECDHE+3DES:RSA+3DES 方括号 “[]” 中的配置就是等价加密算法，通过以上配置可以看出，加密套件 ECDHE-ECDSA-AES128-GCM-SHA256、ECDHE-ECDSA-CHACHA20-POLY1305、ECDHE-RSA-AES128-GCM-SHA256、ECDHE-RSA-CHACHA20-POLY1305 具有相同的优先级。接下来，客户端就可以把优先希望访问的加密套件放到前面，服务端就可以根据等价算法组进行匹配，优先响应客户端支持的且排在前列的加密算法。举例说明如下： Mac Chrome 支持的加密套件序列如下： 123456789101112131415Cipher Suites (13 suites) :Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f) Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030) Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca9) Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca8) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014) Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c) Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d) Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f) Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035) Cipher Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA (0x000a) 按照以上服务端的配置以及等价加密算法的原理，则服务端会优先响应如下加密算法： 12Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f) iphone Chrome 支持的加密套件序列如下： 123456789101112Cipher Suites (10 suites) Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcc14)Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcc13) Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f) Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e) Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a) Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014) Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033) 按照以上服务端的配置以及等价加密算法的原理，则服务端会优先响应如下加密算法： 12Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcc14) 通过以上举例可以看出，Chrome 会在不同的平台会发送不同顺序的加密算法序列，而服务端会根据等价加密算法组的支持，就可以实现针对支持 AES-NI 的终端使用 AES-GCM 算法，否则使用 ChaCha20 算法的目标。]]></content>
  </entry>
  <entry>
    <title><![CDATA[又拍云 CDN 支持了 Brotli 了！]]></title>
    <url>%2F2019%2F04%2F25%2Fbrotli%2F</url>
    <content type="text"><![CDATA[前言我们在此宣布，又拍云 CDN 现在支持 Brotli 算法了。我们之前已经支持了 Gzip 算法，在优化网站速度方面，我们始终不遗余力的进行着新算法的支持和兼容优化。Google 的 Brotli 压缩算法将提升压缩率 20% ，从而可以使用户在不增加 CPU 消耗的情况下提升页面的加载速度，可以给用户带来更好的使用体验。 下面我们进行一些简单的测试，来验证 Brotli 的支持情况，这里我们使用 FireFox 浏览器（版本号为 56.0.2）开发者工具来抓包测试。 测试的 URL 为： 1https://wuxuejun.charmelady.net/test.js（访问域名经过又拍云 CDN 进行加速） 抓包结果如下截图所示： 通过 FireFox 开发者工具抓包测试 Brotli 算法，测试结果为： 1）通过请求头信息 Accept-Encoding：gzip, deflate, br 可以得知，该版本的 FireFox 浏览器支持 Brotli 压缩算法 ； 2) 又拍云 CDN 支持 Brotli ，通过响应头可以得知 CDN 边缘节点响应了一个 br 版本的资源文件，响应头内容为 Content-Encoding: br 3）原始资源文件大小为 702KB，通过 Brotli 压缩之后的大小变为了 225 KB，压缩比为 32.2%。 当然您也可以通过 Curl 命令行发起请求来进行测试，比如： Gzip 压缩 1curl -vo /dev/null https://wuxuejun.charmelady.net/test.js -H &quot;Accept-Encoding: gzip&quot; -w &quot;cost time: %&#123;time_total&#125;\n&quot; Brotli 压缩 1curl -vo /dev/null https://wuxuejun.charmelady.net/test.js -H &quot;Accept-Encoding: br&quot; -w &quot;cost time: %&#123;time_total&#125;\n&quot; 无压缩 12curl -vo /dev/null https://wuxuejun.charmelady.net/test.js -w &quot;cost time: %&#123;time_total&#125;\n&quot; 关于 BrotliBrotli 是由 Google 于 2015 年 9 月推出的无损压缩算法，它通过用变种的 LZ77 算法，Huffman 编码和二阶文本建模进行数据压缩，是一种压缩比很高的压缩方法。根据 Google 发布的研究报告，Brotli 具有如下特点： 1）针对常见的 Web 资源内容，Brotli 的性能要比 Gzip 好 17-25%；2) Brotli 压缩级别为 1 时，压缩速度是最快的，而且此时压缩率比 gzip 压缩等级为 9（最高）时还要高；3）在处理不同 HTML 文档时，brotli 依然提供了非常高的压缩率； 大多数的客户端浏览器都支持 Gzip 以及 Deflate，但是对 Brotli 的支持客户端也越来越多了，当前浏览器兼容情况如下： 截止 2017年 11 月 6日，全球客户端支持 Brotli 算法的比例达到了 70.79%，参见截图所示： 支持 Brotli 算法的浏览器支持的内容编码类型为 br , 通过 FireFox 开发者工具抓包可以获知，FireFox 浏览器的会发起这样的请求头内容： 1Accept-Encoding:gzip, deflate, br 如果此时服务端（这里特指 CDN 边缘节点）支持 Brotli 算法，则会响应如下响应头： 1Content-Encoding: br 如何使用？和 Gzip 压缩特性一样，Brotli 免费开放给 CDN 平台的所有用户使用，并且该特性我们默认已经开启。这里需要说明的是，触发 Brotli 需要同时满足如下条件： 1) Content-Type 满足如下 MIME 列表： 12345678910111213141516171819text/plain text/javascript text/css text/xml text/x-component application/javascript application/x-javascript application/xml application/json application/xhtml+xml application/rss+xml application/atom+xml application/x-font-ttf application/vnd.ms-fontobject image/svg+xml image/x-icon font/opentype text/html — default 2）Content-Length 大于 256 字节3）客户端请求头需携带 Accept-Encoding: br 值得注意的是，并不是所有的浏览器都支持 Brotli 算法，所以在 CDN 边缘节点，我们同时会提供两种文件，一个是通过 Brotli 压缩的文件，一个原始资源文件。当然在客户端不支持 Brotli 算法时，我们也可以提供 Gzip 算法来压缩原始文件并提供给客户端。这里需要声明的是在客户端同时都支持 Brotli 和 Gzip 算法的情况下，我们会优先响应 br 版本的文件。 如果您还不是我们的用户，您可以免费试用我们的 CDN 服务，即可免费测试 Brotli。作为国内首家推出 Brotli 算法的 CDN 厂商，我们在为互联网用户提供良好的用户体验的同时，也会力求减少内容提供商的 CDN 采购成本。 参考文档1）https://en.wikipedia.org/wiki/Brotli 2）http://www.gstatic.com/b/brotlidocs/brotli-2015-09-22.pdf 3）http://caniuse.com/#feat=brotli]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何动态调节 TLS Record Size 来减少网络传输延迟？]]></title>
    <url>%2F2019%2F04%2F25%2Ftls_record_size%2F</url>
    <content type="text"><![CDATA[前言在前面的章节里面，我们介绍了如何通过优化 HTTPS 来降低网络延迟，这些技术包括： 分布式 Session 复用 OCSP Stapling HSTS HTTP/2 False Start ChaCha20-Poly1305 算法 经过调研，我们发现 TLS Record Size 大小会对互联网资源内容加载时间产生很大影响；事实上，在比较槽糕的网络环境下，它可以延迟接收数据的处理时长达几次往返；甚至在移动网络上，这可能会导致数百毫秒的不必要的延迟。今天我们将会从 TCP 协议层面来介绍如何通过动态调节 TLS Record Size 来减少网络传输延迟。 TLS 和 TCPTLS 协议由记录层（TLS Record Layer）和握手层(TLS Handshake Layer)组成，记录层处于协议的最底层，为 TLS 协议提供安全可靠的连接，为高层协议提供数据封装、压缩、加密等基本功能的支持。握手层协议处于记录层协议之上，握手层协议的作用是在真正的应用数据传输之前，使客户端和服务器互相进行身份认证，协商加密算法以及生成加密密钥。其中： 最大的 TLS Record 的大小为 16KB； 每个 TLS Record 包含一个 5Byte 的头部； TCP(Transmission Control Protocol 传输控制协议)是一种面向连接(连接导向)的、可靠的、 基于 IP 的传输层协议。 我们知道，TLS 是建立在可靠的数据传输的基础之上，运行在 TCP 层之上，一个 TLS Record Size 由多个 TCP 包组成，通过 WireShark 抓包可以得知：一个 TLS Record 大小为 16408 Byte ，被分为了 12 TCP 包。 遇到的问题我们知道，Nginx 默认的 ssl_buffer_size 大小为 16KB（不支持动态调整），也即一个 TLS Record Size 的大小，举个例子：假如资源文件的大小为 1600KB，那么就会被拆分为 100 个 TLS Record 传送到客户端。此时会出现这样的问题： 1）TLS Record Size 越大，被拆分的 TCP 包会过多，在传输过程中，如果 TCP 出现丢包情况，那么 TLS Record 到达客户端的时间就会变长，客户端必须等到收到完整的 TLS Record 才能够进行解密，如下图所示：20KB 的资源文件，被分成了大小不同的 record 。TLS Record 及 TCP 包的关系如下图所示： 2）如果 TLS Record Size 较小，则 TCP 丢包对 TLS Record 的影响就较小了，但是于此同时，TLS Record 头部就变多了，可能还会降低连接的吞吐量。 所以，小的 Record Size 会产生额外的消耗；大的 Record Size 会导致延迟；所以可以根据 TCP 窗口大小来合理调整 TLS Record 大小是明智之举。 解决方案根据以上的的论点，我们可以得出这样的结论：在 TCP 慢启动的过程中，我们可以将 TLS Record Size 调整小点；因为这个过程中 TCP 链接的拥塞窗口（cwnd ）较小，TCP 链接的吞吐量也较小；在 TCP 连接结束慢启动之后，TLS Record 的大小可以增大一些，随着时间的推移，最终将 TLS Record 的大小调整到最大（也即 16KB）。 大致的算法规则为： 1）在新连接以及 TCP 慢启动阶段，将 TLS Record 大小调整为大约 1 个 TCP 包的大小； 2）在一定的阶段，也即发送一定数量的 Record Size 之后，采用较大的 Record Size ； 3）随着时间的推移，采用最大的 Record Size 大小，也即 16KB。 为了验证这个过程，通过 WireShark 抓包进行了测试： 阶段一：在刚开始，TLS Record Size 为 1393 Byte 阶段二：一段时间之后，TLS Record Size 为 4253 Byte 阶段三：最后，TLS Record Size 动态变为 16408 Byte 通过抓包显示，也验证了上面的算法规则； 结语动态 TLS Record Size 调整是我们 HTTPS 优化过程中的一项关键技术，并且该特性我们针对平台所有的 HTTPS 加速服务都默认开启了。我们还会不断优化和升级 HTTPS 加速，致力于提供更快更安全的 HTTPS 加速解决方案，欢迎您的试用。 参考文档https://www.igvita.com/2013/12/16/optimizing-nginx-tls-time-to-first-byte/ https://hpbn.co/building-blocks-of-tcp/ https://hpbn.co/transport-layer-security-tls/ https://www.igvita.com/2013/10/24/optimizing-tls-record-size-and-buffering-latency/]]></content>
  </entry>
  <entry>
    <title><![CDATA[TLS 1.3 简介以及如何开启使用？]]></title>
    <url>%2F2019%2F04%2F25%2Fls13%2F</url>
    <content type="text"><![CDATA[前言我们在此宣布，又拍云即将在其内容分发网络中部署 TLS 1.3，作为国内首家在其内容分发网络中部署 TLS 1.3 的 CDN 厂商，又拍云始终跟随安全及速度的步伐，为互联网世界的的安全与加速贡献着自己的一份力量。在互联网世界这个生态系统中，进行 TLS 安全协议的升级并不简单，这个需要客户端和服务端同时进行升级，并确保客户端和服务端的所有通信都是正常的。又拍云在其内容分发网络中进行了这个尝试，接下来，我们更期望主流的浏览器厂商默认可以启用 TLS 1.3。截止目前为止，目前还没有任何主流浏览器在其稳定版中默认启用 TLS 1.3。 什么是 TLS 1.3 ？众所周知，TLS 1.3 是一个全新的 TLS 加密协议，相比 TLS 1.2 ，它既能提高各地互联网用户的访问速度，又能增强安全性。TLS 1.3 通过移除对老旧破损的密码协议的支持，来提高性能、效率和安全性，例如： CBC 模式密码 SHA-1 散列函数 各种 Diffie-Hellman 组 RSA 密钥传输 RC4 流密码 Export ciphers 它还通过简化 TLS 握手来提高速度，使其只需要一次往返，而不是之前版本中的两次。通过简化握手，可以减少延迟并提高性能。 如何在浏览器（客户端）中开启 TLS 1.3 ？ 目前最新版本的 Chrome 和 Firefox 都支持 TLS 1.3，但是都需要手动开启。主要原因是 TLS 1.3 还在草案阶段。 1）在 Firefox 中手动启用 TLS 1.3 Mozilla Firefox 用户可以通过以下方式在 Firefox 中启用 TLS 1.3 支持（ 请注意，Nightly 默认支持 TLS 1.3，而 Firefox Stable 需要专门配置以支持 TLS 1.3 ）。 在 Firefox 地址栏中加载 about:config。如果显示警告屏幕，请确认您要小心，忽略安全提示； 在搜索区域搜索 security.tls.version.max 通过双击它将首选项的值更改为 4，默认为 3，如上图所示。 2）在 Chrome 中手动启动 TLS 1.3 Google Chrome 用户可以通过以下方式在 Chrome 中启用 TLS 1.3 支持（ 注意：Chrome 62 之前的版本需要将 Maximum TLS version enabled 改为 TLS 1.3 ） 在浏览器的地址栏中加载 chrome://flags/。这将打开 Web 浏览器的实验页面。 在搜索区域搜索 TLS 或者 tls ，找到 TLS 1.3 选项，默认为 Default 需要将 TLS 1.3 改为 Enabled (Draft)； 重新启动 Web 浏览器。 如何在又拍云 CDN （服务端）控制台开启 TLS 1.3 ？在 又拍云 CDN 控制台，我们针对 TLS 1.3 开放了切换开关，TLS 1.3 默认为关闭状态，您可以手动开启，如截图所示： 值得声明的是， CDN 是否启用 TLS 1.3 ，这个取决于客户端浏览器是否支持，如果客户端并不支持 TLS 1.3 ，则会进行协议降级，仍会使用较低的 TLS 1.2 协议进行通信。 在 TLS 中，客户端和服务端如何进行版本协商？TLS 发展至今，经历了很多版本的迭代。从 20 世纪 90 年代后期，TLS 是从最早的安全套接层（SSL）改编而来，目前 TLS 有三个版本，分别为 TLSv1.0、TLSv1.1、TLSv1.2。目前 TLSv1.3 还在草案阶段，也是迄今为止，协议版本改造最大的一个版本。 不是所有的客户端和服务端都支持相同的 TLS 协议版本，因此进行升级变得不太可能，因为这涉及到客户端和服务端的同时升级。为了达到在 TLS 通信过程中，协议版本可以达到一致，需要客户端和服务端进行协商，TLS 版本的协商相对是比较简单的，也即客户端通知服务端，其所支持的最新的 TLS 协议版本，服务端回复它们所支持的最新的协议版本。大体过程是： 1）在进行 TLS 连接时，客户端会在连接开始时发送其支持的最高版本： 12client（TLSv1.2）–&gt; server 2）如果服务端可以正常理解客户端所发的 TLS 协议版本，则会回复相同的版本给客户端 123client（TLSv1.2）–&gt; serverclient &lt;– server（TLSv1.2） 3）如果服务端并不支持客户端所发送的通信版本，仅仅支持 TLSv1.0，则服务端回复一个 TLSv1.0 版本给客户端 123client（TLSv1.2）–&gt; serverclient &lt;– server（TLSv1.0） 如果此时，客户端也支持服务端回复的协议版本，则接下来客户端和服务端所有的安全通信都会使用这一版本（ 这里指 TLSv1.0 ）。如果客户端并不支持服务端所发送的协议版本，则会导致通信失败。 如何验证服务端是否支持了 TLS 1.3 ？可以直接通过 Qualys SSL Labs’s SSL Server Test 工具来验证是否支持 TLS 1.3 了 ，如截图所示： 以上，可以得知，客户端以及服务端都支持 TLS 1.3 才可以使用 TLS 1.3 进行通信。如果您使用了 CDN 服务，需要 CDN 厂商的内容分发网络中部署 TLS 1.3 才可以正常启用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试页面]]></title>
    <url>%2F2019%2F02%2F13%2F%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客世界！！！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何在 CentOS 7 下安装 Nginx]]></title>
    <url>%2F2018%2F04%2F21%2F%E5%A6%82%E4%BD%95%E5%9C%A8-CentOS-7-%E4%B8%8B%E5%AE%89%E8%A3%85-Nginx%2F</url>
    <content type="text"><![CDATA[准备工作1）gcc 环境安装 安装 Nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，执行命令为： 1yum install gcc-c++ 2）zlib 库安装 zlib 库提供了很多种压缩和解压缩的方式， Nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。 1yum install -y zlib zlib-devel 3）pcre 库安装 PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。 1yum install -y pcre pcre-devel 4）openssl 安装 OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。 1yum install -y openssl openssl-devel 5）Nginx 源码下载 进入 Nginx 官网下载页面，下载最新稳定版本。 1wget -c http://nginx.org/download/nginx-1.14.0.tar.gz 如何安装 Nginx1）解压并进入目录 12tar -xzvf nginx-1.14.0.tar.gzcd nginx-1.14.0 2）默认配置 1./configure 3）编译安装 1make &amp;&amp; make install 如何启动 Nginx进入启动目录： 1cd /usr/local/nginx/sbin 1) 启动 1./nginx 2）停止 1234567./nginx -s quit此方式停止步骤是待 Nginx 进程处理任务完毕进行停止。./nginx -s stop此方式相当于先查出 Nginx进程 id 再使用 kill 命令强制杀掉进程 3）重启 1./nginx -s reload Nginx 测试启动 Nginx 之后，在浏览器输入该机器的 IP 地址，进入如下页面，即可说明 Nginx 成功安装并且启动成功了。]]></content>
      <categories>
        <category>Nginx</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CDN 服务支持 HTTP/2 Server Push 特性]]></title>
    <url>%2F2018%2F04%2F18%2FHTTP-2-Server-push-%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[前言很长一段时间内，Nginx 并不支持 HTTP/2 的 Server Push 特性。好消息是最新版本的 Nginx 1.13.9 已支持该特性，详情请移步 Nginx 官方博客。这个特性的目的是让服务端将部分资源主动推送给客户端（浏览器），节约了客户端需要使用这些资源再次发送 GET 请求所消耗的时间。 又拍云在 Nginx 基础上，已在其 CDN 网络中全网支持 HTTP/2 的 Server Push 特性，这是既又拍云 CDN 全网支持 TLS 1.3 之后又一重要特性。我们将不遗余力的保持新特性的更新迭代，为全网用户带来更加快速的访问体验。 本文接下来将围绕如下 3 个方面来介绍 Server Push 特性： 何为 Server Push 如何使用 Server Push 如何验证 Server Push 是否生效 何为 Server PushServer Push 是 HTTP/2 规范中引入的一种新技术，也即服务端在没有被客户端明确的询问下，抢先的 “推送” 一些网站资源给客户端（浏览器）。该特性只要被正确的使用，可以达到很好的页面访问效果。为了更方便的理解，下文将进行对比分析： 未使用 Server Push 特性 图片来源：www.smashingmagazine.com WEB 浏览器访问 WEB 服务端遵循着请求-响应模式，也即 WEB 浏览器请求一个资源，WEB 服务器响应一个资源。以常规的网页为例，当请求一个 /index.html 后，WEB 服务端响应一个 /index.html 页面给 WEB 浏览器，此时 WEB 浏览器会去解析该 /index.html 页面，发现还需要去加载 JS、CSS、图片等资源，此时客户端会依次去请求这些资源。这无形当中影响了首屏渲染的时间，不利于页面快速加载和渲染。 已使用 Server Push 特性 图片来源：www.smashingmagazine.com 使用服务器推送（Server Push）技术之后，当 WEB 浏览器请求 /index.html 之后，WEB 服务端会直接将需要推送的资源一并发给 WEB 浏览器，而不需要 WEB 浏览器进行依次请求，这减少了 WEB 浏览器进行 GET 请求所消耗的时间。 如何使用 Server Push又拍云 CDN 支持 Server Push 特性可以通过如下两种方式来实现： 方式一利用 HTTP 的 Link 首部，这在 W3C Preload 工作草案中有详细描述。示例为： 1Link: &lt;/static/css/style.css&gt;; rel=preload; as=style; 其中，Link 首部中 as 是必选的，它告诉了浏览器推送的资源类型，例如 as=style 表明了推送的资源是一个样式表，除了样式表，您还可以推送其他的内容类型，详情参见支持的内容类型。如果需要进行多资源推送，可以进行如下设置： 1Link: &lt;/static/css/styles.css&gt;; rel=preload; as=style, &lt;/js/scripts.js&gt;; rel=preload; as=script, &lt;/img/logo.png&gt;; rel=preload; as=image 方式二在 CDN 控制台进行自定义 Server Push 配置，此时您无需在源站进行修改，例如： 匹配路径为： 1/index.html 推送资源为： 12/static/123.css/static/456.js 在 CDN 控制台的配置如截图所示： 其中【匹配路径】为必填项，【推送资源】为非必填项。 以上两种方式，需要注意如下事项： 如果源站已经通过 Link 首部来实现服务器推送，在 CDN 端的配置只需要配置【匹配路径】即可，无需配置【推送资源】选项；其中通过 Link 首部推送资源的方式， CDN 已经默认开启； 如果在 CDN 端进行自定义 Server Push 推送资源配置，则优先级会高于源站设置的 Link 首部； 无论何种实现方式，总的（包括 Link 首部和 CDN 自定义的方式）推送资源数量不超过 8 个。 如何验证 Server Push 是否生效1）通过 Google Chrome 浏览器进行测试 在 CDN 控制台进行了如下配置： 通过 Google Chrome 开发者工具进行抓包查看，推送的资源都被 Push 了，如截图所示： 查看 /index.html 资源响应头信息，并查看 x-upyun-h2-pushed 字段： 1234567891011121314151617age: 501691cache-control: max-age=691200content-encoding: brcontent-type: text/htmldate: Thu, 19 Apr 2018 05:32:26 GMTetag: W/&quot;86ef9cae8d9f9e1205b25357e78a149b&quot;expires: Sat, 21 Apr 2018 10:10:55 GMTlast-modified: Fri, 13 Apr 2018 10:10:45 GMTserver: marco/2.1set-cookie: UPYUNPUSH=582825323-1696419771-1484613131-3932011035; Max-Age=7200status: 200vary: Accept-Encodingvia: T.205.M, V.403-zj-fud-207, S.mix-sd-dst-035, T.40.M, V.mix-sd-dst-044, T.136.H, M.cun-sd-lyi1-136x-content-type: text/htmlx-request-id: 04dc2c7db2c509af1efc7d7252f0c2ce; 319efa6d981c0cb8dfb2b389368284f4x-source: U/200x-upyun-h2-pushed: /image/meinv1.jpg; /image/meinv2.jpg; /image/meinv3.jpg; /image/meinv4.jpg 其中，x-upyun-h2-pushed 字段内容为： 1x-upyun-h2-pushed: /image/meinv1.jpg; /image/meinv2.jpg; /image/meinv3.jpg; /image/meinv4.jpg 也可以说明所配置的推送资源被成功 Push 了。 2）通过 nghttp 工具进行测试 测试命令为： 1nghttp -ans https://server-push.upyun.club/index.html 测试结果如下： 123456id responseEnd requestStart process code size request path 13 +112.01ms +69us 111.94ms 200 167 /index.html 8 +1.31s * +56.96ms 1.25s 200 314K /image/meinv4.jpg 6 +2.17s * +56.95ms 2.11s 200 628K /image/meinv3.jpg 4 +2.34s * +56.94ms 2.28s 200 717K /image/meinv2.jpg 2 +2.42s * +56.91ms 2.36s 200 726K /image/meinv1.jpg 从测试结果中可以看出，被推推送的资源在 requestStart 栏左侧以星号标记了出来。 后语Server Push 作为 HTTP/2 最激动人心的特性之一，在性能提升方面是一大突破和挑战。又拍云紧紧跟随时代的步伐，寄希望为互联网用户提供更安全、更快的加速体验。与此同时，我们也很高兴成为国内首家推出 Server Push 功能的 CDN 厂商。我们期待您的测试和使用。更多反馈意见，请回复该博客，谢谢！ 参考文档：https://www.cloudflare.com/website-optimization/http2/serverpush/ https://www.smashingmagazine.com/2017/04/guide-http2-server-push/]]></content>
  </entry>
</search>
