<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JackWu&#39;s Blog</title>
  
  <subtitle>Stay Hungry,Stay Foolish!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wuxuejun2018.github.io/"/>
  <updated>2019-02-13T07:39:50.000Z</updated>
  <id>https://wuxuejun2018.github.io/</id>
  
  <author>
    <name>Jack Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试2</title>
    <link href="https://wuxuejun2018.github.io/2019/02/13/%E6%B5%8B%E8%AF%952/"/>
    <id>https://wuxuejun2018.github.io/2019/02/13/测试2/</id>
    <published>2019-02-13T07:11:00.000Z</published>
    <updated>2019-02-13T07:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>你好，测试页面!!!</p><p>你好！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;你好，测试页面!!!&lt;/p&gt;
&lt;p&gt;你好！！！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何在 CentOS 7 下安装 Nginx</title>
    <link href="https://wuxuejun2018.github.io/2018/04/21/%E5%A6%82%E4%BD%95%E5%9C%A8-CentOS-7-%E4%B8%8B%E5%AE%89%E8%A3%85-Nginx/"/>
    <id>https://wuxuejun2018.github.io/2018/04/21/如何在-CentOS-7-下安装-Nginx/</id>
    <published>2018-04-21T08:39:00.000Z</published>
    <updated>2018-04-24T14:52:03.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1）gcc 环境安装</p><p>安装 Nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，执行命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p>2）zlib 库安装</p><p>zlib 库提供了很多种压缩和解压缩的方式， Nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><a id="more"></a> <p>3）pcre 库安装</p><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p>4）openssl 安装</p><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p>5）Nginx 源码下载</p><p>进入 Nginx <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">官网</a>下载页面，下载最新稳定版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://nginx.org/download/nginx-1.14.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="如何安装-Nginx"><a href="#如何安装-Nginx" class="headerlink" title="如何安装 Nginx"></a>如何安装 Nginx</h3><p>1）解压并进入目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf nginx-1.14.0.tar.gz</span><br><span class="line">cd nginx-1.14.0</span><br></pre></td></tr></table></figure><p>2）默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>3）编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="如何启动-Nginx"><a href="#如何启动-Nginx" class="headerlink" title="如何启动 Nginx"></a>如何启动 Nginx</h3><p>进入启动目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><p>1) 启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>2）停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit</span><br><span class="line"></span><br><span class="line">此方式停止步骤是待 Nginx 进程处理任务完毕进行停止。</span><br><span class="line"></span><br><span class="line">./nginx -s stop</span><br><span class="line"></span><br><span class="line">此方式相当于先查出 Nginx进程 id 再使用 kill 命令强制杀掉进程</span><br></pre></td></tr></table></figure><p>3）重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="Nginx-测试"><a href="#Nginx-测试" class="headerlink" title="Nginx 测试"></a>Nginx 测试</h3><p>启动 Nginx 之后，在浏览器输入该机器的 IP 地址，进入如下页面，即可说明 Nginx 成功安装并且启动成功了。</p><p><img src="http://images.statics.9696e.com/wp-content/uploads/2014/11/nginx_default.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;1）gcc 环境安装&lt;/p&gt;
&lt;p&gt;安装 Nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，执行命令为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install gcc-c++&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2）zlib 库安装&lt;/p&gt;
&lt;p&gt;zlib 库提供了很多种压缩和解压缩的方式， Nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y zlib zlib-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://wuxuejun2018.github.io/categories/Nginx/"/>
    
      <category term="CentOS" scheme="https://wuxuejun2018.github.io/categories/Nginx/CentOS/"/>
    
    
      <category term="Nginx" scheme="https://wuxuejun2018.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>又拍云 CDN 服务支持 HTTP/2 Server Push 特性</title>
    <link href="https://wuxuejun2018.github.io/2018/04/18/HTTP-2-Server-push-%E4%BB%8B%E7%BB%8D/"/>
    <id>https://wuxuejun2018.github.io/2018/04/18/HTTP-2-Server-push-介绍/</id>
    <published>2018-04-18T13:23:00.000Z</published>
    <updated>2018-04-24T02:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很长一段时间内，<code>Nginx</code> 并不支持 <code>HTTP/2</code> 的 <code>Server Push</code> 特性。好消息是最新版本的 <code>Nginx 1.13.9</code> 已支持该特性，详情请移步 <a href="https://www.nginx.com/blog/nginx-1-13-9-http2-server-push/" target="_blank" rel="noopener">Nginx 官方博客</a>。这个特性的目的是让服务端将部分资源主动推送给客户端（浏览器），节约了客户端需要使用这些资源再次发送 GET 请求所消耗的时间。</p><p>又拍云在 <code>Nginx</code> 基础上，已在其 CDN 网络中全网支持 <code>HTTP/2</code> 的 <code>Server Push</code> 特性，这是既又拍云 CDN 全网支持 <code>TLS 1.3</code> 之后又一重要特性。我们将不遗余力的保持新特性的更新迭代，为全网用户带来更加快速的访问体验。</p><a id="more"></a> <p>本文接下来将围绕如下 3 个方面来介绍 <code>Server Push</code> 特性：</p><ul><li>何为 Server Push</li><li>如何使用 Server Push</li><li>如何验证 Server Push 是否生效</li></ul><h3 id="何为-Server-Push"><a href="#何为-Server-Push" class="headerlink" title="何为 Server Push"></a>何为 Server Push</h3><p><code>Server Push</code> 是 <code>HTTP/2</code> 规范中引入的一种新技术，也即服务端在没有被客户端明确的询问下，抢先的 “推送” 一些网站资源给客户端（浏览器）。该特性只要被正确的使用，可以达到很好的页面访问效果。为了更方便的理解，下文将进行对比分析：</p><ul><li>未使用 <code>Server Push</code> 特性</li></ul><p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cbf9347f-24a2-4634-8a14-36ff95725dd6/normal-server-response.png"></p><p>图片来源：<a href="http://www.smashingmagazine.com" target="_blank" rel="noopener">www.smashingmagazine.com</a></p><p>WEB 浏览器访问 WEB 服务端遵循着请求-响应模式，也即 WEB 浏览器请求一个资源，WEB 服务器响应一个资源。以常规的网页为例，当请求一个 <code>/index.html</code> 后，WEB 服务端响应一个 <code>/index.html</code> 页面给 WEB 浏览器，此时 WEB 浏览器会去解析该 <code>/index.html</code> 页面，发现还需要去加载 JS、CSS、图片等资源，此时客户端会依次去请求这些资源。这无形当中影响了首屏渲染的时间，不利于页面快速加载和渲染。</p><ul><li>已使用 <code>Server Push</code> 特性</li></ul><p><img src="http://provide.smashingmagazine.com/server-push-response.svg" height="300" width="600"></p><p>图片来源：<a href="http://www.smashingmagazine.com" target="_blank" rel="noopener">www.smashingmagazine.com</a></p><p>使用服务器推送（Server Push）技术之后，当 WEB 浏览器请求 <code>/index.html</code> 之后，WEB 服务端会直接将需要推送的资源一并发给 WEB 浏览器，而不需要 WEB 浏览器进行依次请求，这减少了 WEB 浏览器进行 GET 请求所消耗的时间。</p><h3 id="如何使用-Server-Push"><a href="#如何使用-Server-Push" class="headerlink" title="如何使用 Server Push"></a>如何使用 Server Push</h3><p>又拍云 CDN 支持 <code>Server Push</code> 特性可以通过如下两种方式来实现：</p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>利用 HTTP 的 <code>Link</code> 首部，这在 W3C <a href="https://www.w3.org/TR/preload/#server-push-http-2" target="_blank" rel="noopener">Preload</a> 工作草案中有详细描述。示例为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Link: &lt;/static/css/style.css&gt;; rel=preload; as=style;</span><br></pre></td></tr></table></figure><p>其中，<code>Link</code> 首部中 <code>as</code> 是必选的，它告诉了浏览器推送的资源类型，例如 <code>as=style</code> 表明了推送的资源是一个样式表，除了样式表，您还可以推送其他的内容类型，详情参见<a href="https://w3c.github.io/preload/#link-element-interface-extensions" target="_blank" rel="noopener">支持的内容类型</a>。如果需要进行多资源推送，可以进行如下设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Link: &lt;/static/css/styles.css&gt;; rel=preload; as=style, &lt;/js/scripts.js&gt;; rel=preload; as=script, &lt;/img/logo.png&gt;; rel=preload; as=image</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>在 CDN 控制台进行自定义 <code>Server Push</code> 配置，此时您无需在源站进行修改，例如：</p><p>匹配路径为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.html</span><br></pre></td></tr></table></figure><p>推送资源为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/static/123.css</span><br><span class="line">/static/456.js</span><br></pre></td></tr></table></figure><p>在 CDN 控制台的配置如截图所示：</p><p><img src="http://upyun-assets.b0.upaiyun.com/docs/cdn/config/upyun-cdn-config-http2-server-push.png" height="300" width="600"></p><p>其中【匹配路径】为必填项，【推送资源】为非必填项。</p><p>以上两种方式，需要注意如下事项：</p><ul><li><p>如果源站已经通过 <code>Link</code> 首部来实现服务器推送，在 CDN 端的配置只需要配置【匹配路径】即可，无需配置【推送资源】选项；其中通过 <code>Link</code> 首部推送资源的方式， CDN 已经默认开启；</p></li><li><p>如果在 CDN 端进行自定义 <code>Server Push</code> 推送资源配置，则优先级会高于源站设置的 <code>Link</code> 首部；</p></li><li><p>无论何种实现方式，总的（包括 <code>Link</code> 首部和 CDN 自定义的方式）推送资源数量不超过 8 个。</p></li></ul><h3 id="如何验证-Server-Push-是否生效"><a href="#如何验证-Server-Push-是否生效" class="headerlink" title="如何验证 Server Push 是否生效"></a>如何验证 Server Push 是否生效</h3><p><strong>1）通过 <code>Google Chrome</code> 浏览器进行测试</strong></p><p>在 CDN 控制台进行了如下配置：</p><p><img src="https://upyun-assets.b0.upaiyun.com/docs/blog/https_server_push_test.png" height="300" width="600"></p><p>通过 <code>Google Chrome</code> 开发者工具进行抓包查看，推送的资源都被 <code>Push</code> 了，如截图所示：</p><p><img src="http://upyun-assets.b0.upaiyun.com/docs/blog/https_server-push_upyun_club_index_html.png" height="300" width="600"></p><p>查看 <code>/index.html</code> 资源响应头信息，并查看 <code>x-upyun-h2-pushed</code> 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">age: 501691</span><br><span class="line">cache-control: max-age=691200</span><br><span class="line">content-encoding: br</span><br><span class="line">content-type: text/html</span><br><span class="line">date: Thu, 19 Apr 2018 05:32:26 GMT</span><br><span class="line">etag: W/&quot;86ef9cae8d9f9e1205b25357e78a149b&quot;</span><br><span class="line">expires: Sat, 21 Apr 2018 10:10:55 GMT</span><br><span class="line">last-modified: Fri, 13 Apr 2018 10:10:45 GMT</span><br><span class="line">server: marco/2.1</span><br><span class="line">set-cookie: UPYUNPUSH=582825323-1696419771-1484613131-3932011035; Max-Age=7200</span><br><span class="line">status: 200</span><br><span class="line">vary: Accept-Encoding</span><br><span class="line">via: T.205.M, V.403-zj-fud-207, S.mix-sd-dst-035, T.40.M, V.mix-sd-dst-044, T.136.H, M.cun-sd-lyi1-136</span><br><span class="line">x-content-type: text/html</span><br><span class="line">x-request-id: 04dc2c7db2c509af1efc7d7252f0c2ce; 319efa6d981c0cb8dfb2b389368284f4</span><br><span class="line">x-source: U/200</span><br><span class="line">x-upyun-h2-pushed: /image/meinv1.jpg; /image/meinv2.jpg; /image/meinv3.jpg; /image/meinv4.jpg</span><br></pre></td></tr></table></figure><p>其中，<code>x-upyun-h2-pushed</code> 字段内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x-upyun-h2-pushed: /image/meinv1.jpg; /image/meinv2.jpg; /image/meinv3.jpg; /image/meinv4.jpg</span><br></pre></td></tr></table></figure><p>也可以说明所配置的推送资源被成功 <code>Push</code> 了。</p><p><strong>2）通过 <a href="http://www.nghttp2.org/" target="_blank" rel="noopener">nghttp</a> 工具进行测试</strong></p><p>测试命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nghttp -ans https://server-push.upyun.club/index.html</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id  responseEnd requestStart  process code size request path</span><br><span class="line"> 13   +112.01ms        +69us 111.94ms  200  167 /index.html</span><br><span class="line">  8      +1.31s *   +56.96ms    1.25s  200 314K /image/meinv4.jpg</span><br><span class="line">  6      +2.17s *   +56.95ms    2.11s  200 628K /image/meinv3.jpg</span><br><span class="line">  4      +2.34s *   +56.94ms    2.28s  200 717K /image/meinv2.jpg</span><br><span class="line">  2      +2.42s *   +56.91ms    2.36s  200 726K /image/meinv1.jpg</span><br></pre></td></tr></table></figure><p>从测试结果中可以看出，被推推送的资源在 <code>requestStart</code> 栏左侧以星号标记了出来。</p><h3 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h3><p><code>Server Push</code> 作为 <code>HTTP/2</code> 最激动人心的特性之一，在性能提升方面是一大突破和挑战。又拍云紧紧跟随时代的步伐，寄希望为互联网用户提供更安全、更快的加速体验。与此同时，我们也很高兴成为国内首家推出 <code>Server Push</code> 功能的 CDN 厂商。我们期待您的测试和使用。更多反馈意见，请回复该博客，谢谢！</p><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p><a href="https://www.cloudflare.com/website-optimization/http2/serverpush/" target="_blank" rel="noopener">https://www.cloudflare.com/website-optimization/http2/serverpush/</a></p><p><a href="https://www.smashingmagazine.com/2017/04/guide-http2-server-push/" target="_blank" rel="noopener">https://www.smashingmagazine.com/2017/04/guide-http2-server-push/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;很长一段时间内，&lt;code&gt;Nginx&lt;/code&gt; 并不支持 &lt;code&gt;HTTP/2&lt;/code&gt; 的 &lt;code&gt;Server Push&lt;/code&gt; 特性。好消息是最新版本的 &lt;code&gt;Nginx 1.13.9&lt;/code&gt; 已支持该特性，详情请移步 &lt;a href=&quot;https://www.nginx.com/blog/nginx-1-13-9-http2-server-push/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nginx 官方博客&lt;/a&gt;。这个特性的目的是让服务端将部分资源主动推送给客户端（浏览器），节约了客户端需要使用这些资源再次发送 GET 请求所消耗的时间。&lt;/p&gt;
&lt;p&gt;又拍云在 &lt;code&gt;Nginx&lt;/code&gt; 基础上，已在其 CDN 网络中全网支持 &lt;code&gt;HTTP/2&lt;/code&gt; 的 &lt;code&gt;Server Push&lt;/code&gt; 特性，这是既又拍云 CDN 全网支持 &lt;code&gt;TLS 1.3&lt;/code&gt; 之后又一重要特性。我们将不遗余力的保持新特性的更新迭代，为全网用户带来更加快速的访问体验。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
